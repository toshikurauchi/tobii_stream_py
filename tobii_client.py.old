from ctypes import *
from enum import IntEnum


LIB = cdll.LoadLibrary('lib/x86/tobii_stream_engine.dll')


# https://www.chriskrycho.com/2015/ctypes-structures-and-dll-exports.html
# Define the types we need.
# class CtypesEnum(IntEnum):
#     """A ctypes-compatible IntEnum superclass."""
#     @classmethod
#     def from_param(cls, obj):
#         return int(obj)


class TobiiError(IntEnum):
    TOBII_ERROR_NO_ERROR = 0
    TOBII_ERROR_INTERNAL = 1
    TOBII_ERROR_INSUFFICIENT_LICENSE = 2
    TOBII_ERROR_NOT_SUPPORTED = 3
    TOBII_ERROR_NOT_AVAILABLE = 4
    TOBII_ERROR_CONNECTION_FAILED = 5
    TOBII_ERROR_TIMED_OUT = 6
    TOBII_ERROR_ALLOCATION_FAILED = 7
    TOBII_ERROR_INVALID_PARAMETER = 8
    TOBII_ERROR_CALIBRATION_ALREADY_STARTED = 9
    TOBII_ERROR_CALIBRATION_NOT_STARTED = 10
    TOBII_ERROR_ALREADY_SUBSCRIBED = 11
    TOBII_ERROR_NOT_SUBSCRIBED = 12
    TOBII_ERROR_OPERATION_FAILED = 13
    TOBII_ERROR_CONFLICTING_API_INSTANCES = 14
    TOBII_ERROR_CALIBRATION_BUSY = 15
    TOBII_ERROR_CALLBACK_IN_PROGRESS = 16
    TOBII_ERROR_TOO_MANY_SUBSCRIBERS = 17


class TobiiVersion(Structure):
    _fields_ = [
        ('major', c_int),
        ('minor', c_int),
        ('revision', c_int),
        ('build', c_int),
        ]
    
    def __str__(self):
        return f'{self.major}.{self.minor}.{self.revision}.{self.build}'


def get_api_version():
    tobii_version = TobiiVersion()
    LIB.tobii_get_api_version(byref(tobii_version))
    return str(tobii_version)


class TobiiAPI(Structure):
    pass


def api_create():
    api = pointer(pointer(TobiiAPI()))
    LIB.tobii_api_create(api)
    return api

if __name__ == "__main__":
    print(f'API version: {get_api_version()}')
    print(api_create())